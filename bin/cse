#!/usr/bin/env ruby

require "bundler/setup"
require "crystal_save_editor"

# You can add fixtures and/or initialization code here to make experimenting
# with your gem easier. You can also use a different console, if you like.

CHARS = {
  "@" => 0x50,
  "#" => 0x54,
  "№" => 0x74,
  "…" => 0x75,

  "┌" => 0x79,
  "─" => 0x7A,
  "┐" => 0x7B,
  "│" => 0x7C,
  "└" => 0x7D,
  "┘" => 0x7E,
  " " => 0x7F,
  "A" => 0x80,
  "B" => 0x81,
  "C" => 0x82,
  "D" => 0x83,
  "E" => 0x84,
  "F" => 0x85,
  "G" => 0x86,
  "H" => 0x87,
  "I" => 0x88,
  "J" => 0x89,
  "K" => 0x8A,
  "L" => 0x8B,
  "M" => 0x8C,
  "N" => 0x8D,
  "O" => 0x8E,
  "P" => 0x8F,
  "Q" => 0x90,
  "R" => 0x91,
  "S" => 0x92,
  "T" => 0x93,
  "U" => 0x94,
  "V" => 0x95,
  "W" => 0x96,
  "X" => 0x97,
  "Y" => 0x98,
  "Z" => 0x99,
  "(" => 0x9A,
  ")" => 0x9B,
  ":" => 0x9C,
  ";" => 0x9D,
  "[" => 0x9E,
  "]" => 0x9F,
  "a" => 0xA0,
  "b" => 0xA1,
  "c" => 0xA2,
  "d" => 0xA3,
  "e" => 0xA4,
  "f" => 0xA5,
  "g" => 0xA6,
  "h" => 0xA7,
  "i" => 0xA8,
  "j" => 0xA9,
  "k" => 0xAA,
  "l" => 0xAB,
  "m" => 0xAC,
  "n" => 0xAD,
  "o" => 0xAE,
  "p" => 0xAF,
  "q" => 0xB0,
  "r" => 0xB1,
  "s" => 0xB2,
  "t" => 0xB3,
  "u" => 0xB4,
  "v" => 0xB5,
  "w" => 0xB6,
  "x" => 0xB7,
  "y" => 0xB8,
  "z" => 0xB9,
  "Ä" => 0xC0,
  "Ö" => 0xC1,
  "Ü" => 0xC2,
  "ä" => 0xC3,
  "ö" => 0xC4,
  "ü" => 0xC5,
  "'d" => 0xD0,
  "'l" => 0xD1,
  "'m" => 0xD2,
  "'r" => 0xD3,
  "'s" => 0xD4,
  "'t" => 0xD5,
  "'v" => 0xD6,
  "'" => 0xE0,
  "-" => 0xE3,
  "?" => 0xE6,
  "!" => 0xE7,
  "." => 0xE8,
  "&" => 0xE9,
  "é" => 0xEA,
  "→" => 0xEB,
  "▷" => 0xEC,
  "▶" => 0xED,
  "▼" => 0xEE,
  "♂" => 0xEF,
  "¥" => 0xF0,
  "×" => 0xF1,
  "/" => 0xF3,
  "," => 0xF4,
  "♀" => 0xF5,
  "0" => 0xF6,
  "1" => 0xF7,
  "2" => 0xF8,
  "3" => 0xF9,
  "4" => 0xFA,
  "5" => 0xFB,
  "6" => 0xFC,
  "7" => 0xFD,
  "8" => 0xFE,
  "9" => 0xFF
}

module Datum
  Offset = Struct.new('Datum', :length, :offset)

  GENDER = Offset.new 1, 0x3e3d
  PLAYER_NAME = Offset.new 11, 0x200b
  CHECKSUM1 = Offset.new 2, 0x2d0d
  CHECKSUM2 = Offset.new 2, 0x1f0d
end

module Gender
  BOY = "\x00"
  GIRL = "\x01"
end

module Helpers
  # Must force_encoding unless second line of file is '# encoding: ASCII-8BIT'.
  # See http://ruby-doc.org/core-2.3.0/Encoding.html
  # Unfortunately, pry does not use encoding specified with magic comment.
  def gsub_byte_string(target, pattern, replacement)
    target.gsub(pattern.force_encoding(Encoding::ASCII_8BIT), replacement.force_encoding(Encoding::ASCII_8BIT))
  end
end

class Save
  attr_accessor :path
  include Helpers

  def initialize(path)
    @path = path
  end

  def gender
    IO.binread path, Datum::GENDER.length, Datum::GENDER.offset
  end

  def gender=(gender)
    # TODO Put in check that it is valid
    IO.binwrite path, gender, Datum::GENDER.offset
  end

  def player_name
    IO.binread path, Datum::PLAYER_NAME.length, Datum::PLAYER_NAME.offset
  end

  def player_name=(new_player_name)
    # TODO Put in check that it is 7 characters or less
    bytes = new_player_name.chars.map { |char| CHARS.fetch char }
    # Crystal reserves 11 bytes for the name, but only 7 of these are usable.
    # The first 8 bytes contain the name with any leftover equal to 0x50.
    # Since the name can be 7 bytes at most, there will be at least one 0x50 of padding.
    # The remaining 3 bytes are equal to 0x00.
    padding = [0x50] * (8 - bytes.length) + [0x00] * 3
    bytes += padding
    # Each array element is a signed 8-bit, so we use 'c' to pack them.
    byte_string = bytes.pack('c*')
    IO.binwrite path, byte_string, Datum::PLAYER_NAME.offset
    update_checksum
  end

  def checksum_1
    IO.binread path, Datum::CHECKSUM1.length, Datum::CHECKSUM1.offset
  end

  def checksum_2
    IO.binread path, Datum::CHECKSUM2.length, Datum::CHECKSUM2.offset
  end

  private

  def calculate_checksum_1
    start_1 = 0x2009
    end_1 = 0x2b82
    len_1 = end_1 - start_1
    byte_string = IO.read path, len_1, start_1
    calculate_checksum byte_string
  end

  def calculate_checksum_2
    start_2 = 0x1209
    end_2 = 0x1d82
    len_2 = end_2 - start_2
    byte_string = IO.read path, len_2, start_2
    calculate_checksum byte_string
  end

  def calculate_checksum(byte_string)
    sum = byte_string.bytes.reduce(:+)
    [sum].pack('s')
  end

  # This is sufficient for the game to use the modified data.
  def update_checksum_1
    IO.binwrite path, calculate_checksum_1, Datum::CHECKSUM1.offset
  end
  alias_method :update_checksum, :update_checksum_1
end

path = 'spec/fixtures/Crystal.sav'
save = Save.new path

require 'pry'; binding.pry

# (If you use this, don't forget to add pry to your Gemfile!)
#require "pry"
#Pry.start
